title: "Predicting whether review is positive or negative (Text Classification)"
description: "This project uses [spaCy](https://spacy.io) to train a **binary text classifier** to predict whether review text is positive/negative. The pipeline uses the component `textcat` in order to train a binary text classifier would be to use the `textcat` component with two labels, where exactly one of the two labels is True for each document."
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  config: "config.cfg"
  name: "textcat_reviews"
  version: "0.1.0"
  train: "train"
  dev: "dev"
  gpu_id: -1

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
# directories: ["assets", "training", "configs", "scripts", "corpus"]
directories: ["assets","training", "configs", "scripts", "corpus"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded. But the
# 'project assets' command still lets you verify that the checksums match.
assets:
  - dest: "assets/${vars.train}.spacy"
#     checksum: "ebd254a77132b9018fdd581e95aef549"
#     description: "JSONL-formatted training data exported from Prodigy, annotated with `DOCUMENTATION` (661 examples)"
  - dest: "assets/${vars.dev}.spacy"
#     checksum: "ab56fc1828403bffaf163f3c540e473f"
#     description: "JSONL-formatted development data exported from Prodigy, annotated with `DOCUMENTATION` (500 examples)"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    # - preprocess
    - train
    - evaluate

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  # - name: "preprocess"
  #   help: "Convert the data to spaCy's binary format"
  #   script:
  #     - "python scripts/preprocess.py assets/${vars.train}.jsonl corpus/${vars.train}.spacy"
  #     - "python scripts/preprocess.py assets/${vars.dev}.jsonl corpus/${vars.dev}.spacy"
  #   deps:
  #     - "assets/${vars.train}.jsonl"
  #     - "assets/${vars.dev}.jsonl"
  #     - "scripts/preprocess.py"
  #   outputs:
  #     - "corpus/${vars.train}.spacy"
  #     - "corpus/${vars.dev}.spacy"

  - name: "train"
    help: "Train a text classification model"
    script:
      - "python -m spacy train configs/${vars.config} --output training/ --paths.train corpus/${vars.train}.spacy --paths.dev corpus/${vars.dev}.spacy --gpu-id ${vars.gpu_id}"
    deps:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"
      - "configs/config.cfg"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate training/model-best corpus/${vars.dev}.spacy --output training/metrics.json --gpu-id ${vars.gpu_id}"
    deps:
      - "corpus/${vars.dev}.spacy"
      - "training/model-best"
    outputs:
      - "training/metrics.json"
